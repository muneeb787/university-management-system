/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Faculity_Dashboard;

import DatabaseConnectivity.connectivity;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.jdatepicker.DateLabelFormatter;

/**
 *
 * @author Muneeb Ahmad
 */
public final class Attendance extends javax.swing.JPanel {

    ResultSet myres = null;
    connectivity con = null;
    String StaffId = null;
    String Sub_Code = null;
    String Sub_Code1 = null;
    String Sub_Name = null;
    String Sem_No = null;
    String Dept_Code = null;
    String Sub_Type = "null";
    String Attendance = null;
    String Todatdate =null;
    String StuId = null;
    String StuName = null;
    String StuSub = null;
    int Obt_marts = 0;

    /**
     * Creates new form Departments
     */
    public Attendance() throws SQLException {
        initComponents();
        con = new connectivity();
        jTable1.getTableHeader().setFont(new Font("segoe UI", Font.BOLD, 12));
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setBackground(new Color(32, 136, 203));
        jTable1.getTableHeader().setForeground(new Color(255, 255, 255));
        DefaultTableModel tMOdel = (DefaultTableModel) jTable1.getModel();
        tMOdel.setRowCount(0);
        System.out.println("dsfadfasdfsadfasd");
        //settable();
        jTable1.setSelectionBackground(Color.darkGray);

    }

    Attendance(String StaffId1) throws SQLException {
        initComponents();
        System.out.println("Clicking 1");
        StaffId = StaffId1;
        System.out.println("Clicking 2");
        con = new connectivity();
        System.out.println("Clicking 3");
        jTable1.getTableHeader().setFont(new Font("segoe UI", Font.BOLD, 12));
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setBackground(new Color(32, 136, 203));
        jTable1.getTableHeader().setForeground(new Color(255, 255, 255));
        DefaultTableModel tMOdel = (DefaultTableModel) jTable1.getModel();
        tMOdel.setRowCount(0);
        fetchSubjects();
        System.out.println("Clicking 4");
        jTable1.setSelectionBackground(Color.darkGray);
//settable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        kGradientPanel2 = new com.k33ptoo.components.KGradientPanel();
        kGradientPanel1 = new com.k33ptoo.components.KGradientPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        kGradientPanel4 = new com.k33ptoo.components.KGradientPanel();
        jLabel1 = new javax.swing.JLabel();
        Subjects = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        date = new com.toedter.calendar.JDateChooser();
        kButton1 = new com.k33ptoo.components.KButton();
        jLabel3 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(574, 539));
        setRequestFocusEnabled(false);

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        kGradientPanel2.setkEndColor(new java.awt.Color(51, 51, 51));
        kGradientPanel2.setkStartColor(new java.awt.Color(51, 51, 51));

        kGradientPanel1.setkEndColor(new java.awt.Color(0, 204, 204));
        kGradientPanel1.setkStartColor(new java.awt.Color(0, 102, 102));
        kGradientPanel1.setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Subjects");

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap(199, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(176, 176, 176))
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel2)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setBackground(new java.awt.Color(51, 51, 51));
        jTable1.setFont(new java.awt.Font("Myanmar Text", 0, 14)); // NOI18N
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Name", "Subject", "Attendance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTable1.setFillsViewportHeight(true);
        jTable1.setFocusable(false);
        jTable1.setGridColor(new java.awt.Color(51, 51, 51));
        jTable1.setRequestFocusEnabled(false);
        jTable1.setRowHeight(25);
        jTable1.setSelectionBackground(new java.awt.Color(32, 136, 203));
        jTable1.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTable1.setShowGrid(true);
        jTable1.setShowVerticalLines(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTable1FocusGained(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        kGradientPanel4.setkEndColor(new java.awt.Color(51, 51, 51));
        kGradientPanel4.setkStartColor(new java.awt.Color(51, 51, 51));
        kGradientPanel4.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Select Subject");

        Subjects.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        Subjects.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SubjectsItemStateChanged(evt);
            }
        });
        Subjects.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubjectsActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Select Date");

        date.setDateFormatString("yyyy-mm-dd");
        date.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dateMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                dateMouseExited(evt);
            }
        });
        date.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                dateInputMethodTextChanged(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel4Layout = new javax.swing.GroupLayout(kGradientPanel4);
        kGradientPanel4.setLayout(kGradientPanel4Layout);
        kGradientPanel4Layout.setHorizontalGroup(
            kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel4Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Subjects, 0, 273, Short.MAX_VALUE)
                    .addComponent(date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33))
        );
        kGradientPanel4Layout.setVerticalGroup(
            kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Subjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        kButton1.setText("Submit Marks");
        kButton1.setkAllowGradient(false);
        kButton1.setkBackGroundColor(new java.awt.Color(0, 153, 153));
        kButton1.setkHoverForeGround(new java.awt.Color(0, 153, 153));
        kButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kButton1ActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout kGradientPanel2Layout = new javax.swing.GroupLayout(kGradientPanel2);
        kGradientPanel2.setLayout(kGradientPanel2Layout);
        kGradientPanel2Layout.setHorizontalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(kGradientPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(kButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        kGradientPanel2Layout.setVerticalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel2Layout.createSequentialGroup()
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(kGradientPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(629, 629, 629))
        );

        jScrollPane1.setViewportView(kGradientPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SubjectsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SubjectsItemStateChanged


    }//GEN-LAST:event_SubjectsItemStateChanged

    private void SubjectsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubjectsActionPerformed
        System.out.println("-----------------------");
        DefaultTableModel tMOdel = (DefaultTableModel) jTable1.getModel();
        tMOdel.setRowCount(0);
        String Total_Marks = null;
        String Obtain_Marks = null;
        String SubName = (String) Subjects.getSelectedItem();
        if (SubName == ("Select")) {
            tMOdel.setRowCount(0);
        } else {
            try {
                myres = con.mystmt.executeQuery("select * from subject where SUB_NAME = '" + SubName + "' ");
                while (myres.next()) {
                    Sub_Code = myres.getString("SUB_CODE");
                    Sem_No = myres.getString("SEMESTER_NO");
                    Dept_Code = myres.getString("DEPT_CODE");
                    Sub_Type = myres.getString("SUBJECT_TYPE");
                    Total_Marks = myres.getString("TOTAL_MARKS");
                    System.out.println("Sub Type is: " + Sub_Type);
                }
                if (Sub_Type.equals("Optional")) {
                    System.out.println("IF CALLS");
                    myres = con.mystmt.executeQuery("select * from student s join person p on s.USERID=p.USERID left join attendence a on s.STUDENT_ID=a.STUDENT_ID and a.SUB_CODE='"+Sub_Code+"'where s.SEMESTER='"+Sem_No+"'");
                    int sr = 0;
                    while (myres.next()) {
                        sr++;
                        String StudentID = myres.getString("STUDENT_ID");
                        String StudentName = myres.getString("Name");
                        String StudentSem = myres.getString("SEMESTER");
                        //String StudentID = myres.getString("STUDENT_ID");
                        //Obtain_Marks = myres.getString("OBTAINED_MARKS");

                        String resultdata[] = {StudentID, StudentName, SubName, "Present"};
                        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                        model.addRow(resultdata);
                    }
                } else {
                    System.out.println("Else CALLS");
                    myres = con.mystmt.executeQuery("select * from student s join person p on s.USERID=p.USERID left join attendence a on s.STUDENT_ID=a.STUDENT_ID and a.SUB_CODE='"+Sub_Code+"'where s.SEMESTER='"+Sem_No+"'");
                    int sr = 0;
                    while (myres.next()) {
                        sr++;
                        String StudentID = myres.getString("STUDENT_ID");
                        String StudentName = myres.getString("Name");
                        String StudentSem = myres.getString("SEMESTER");
                        //String StudentID = myres.getString("STUDENT_ID");

                        //Obtain_Marks = myres.getString("OBTAINED_MARKS");
                        String resultdata[] = {StudentID, StudentName, SubName, "Present"};
                        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                        model.addRow(resultdata);
                    }
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_SubjectsActionPerformed

    private void kButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kButton1ActionPerformed
        addAttendance();
    }//GEN-LAST:event_kButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int index = jTable1.getSelectedRow();
        DefaultTableModel TableModel = (DefaultTableModel) jTable1.getModel();
        TableModel model = jTable1.getModel();

        System.out.println("Get Clicked");
        int i = jTable1.getSelectedRow();
        System.out.println("Row is: " + i);
        String pre = (String) jTable1.getValueAt(i, 3);
        System.out.println("String is: " + pre);
        Component c = jTable1.getCellRenderer(i, 3).getTableCellRendererComponent(jTable1, null, false, true, i, 3);

        if (pre == "Present") {
            jTable1.setValueAt("Absent", i, 3);
            //c.setBackground(Color.RED);
            //jTable1.setSelectionBackground(Color.red);
        } else {
            jTable1.setValueAt("Present", i, 3);
            //c.setBackground(Color.darkGray);
            //jTable1.setSelectionBackground(Color.darkGray);
        }


    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusGained

    }//GEN-LAST:event_jTable1FocusGained

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased

    }//GEN-LAST:event_jTable1MouseReleased

    private void dateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateMouseClicked
        System.out.println("data Changed");
    }//GEN-LAST:event_dateMouseClicked

    private void dateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateMouseExited
       System.out.println("data Changed  11");
    }//GEN-LAST:event_dateMouseExited

    private void dateInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_dateInputMethodTextChanged
         System.out.println("data Changed  222");
    }//GEN-LAST:event_dateInputMethodTextChanged
    public void addAttendance() {
        int result = 0;
        int i = 0;
        
        for (i = 0; i < jTable1.getRowCount(); i++) {
            StuId = (String) jTable1.getValueAt(i, 0);
            StuName = (String) jTable1.getValueAt(i, 1);
            StuSub = (String) jTable1.getValueAt(i, 2);
            Attendance = (String) jTable1.getValueAt(i, 3);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Todatdate = sdf.format(date.getDate());
            System.out.println("_______________________________________________");
            System.out.println("Stu Id is : " + StuId);
            System.out.println("Stu Name is : " + StuName);
            System.out.println("Stu Sub is : " + Sub_Code);
            System.out.println("Stu Attendance is : " + Attendance);
            System.out.println("Todaydate is : " + Todatdate);
            System.out.println("Sem is : " + Sem_No);

            try {
                result = addStudentTheoryMarks();

            } catch (NumberFormatException e) {
                TableError("Must be a Number !");
                break;
            }

        }
        if (result > 0 && i == jTable1.getRowCount()) {
            TableError("Theory Marks Succesfully submitted");

        }

    }

    public int addStudentTheoryMarks() {
        int result = 0;
        System.out.println("addStudentTheoryMarks");
        try {
           String query = "update attendence set Attendance_status='" + Attendance + "' where SUB_CODE='" + Sub_Code + "' and STUDENT_ID='" + StuId + "' and ATTENDENCE_DATE = '"+Todatdate+"'";
           PreparedStatement pr = con.myconn.prepareStatement(query);
           result = pr.executeUpdate();
            System.out.println("addStudentTheoryMarks --> Update");
            if (result == 0) {
                System.out.println("addStudentTheoryMarks --> Inserting");
                query = "insert into attendence values(?,?,?,?,?,?)";
                pr = con.myconn.prepareStatement(query);
                pr.setString(1, Dept_Code);
                pr.setString(2, Sub_Code);
                pr.setString(3, StuId);
                pr.setString(4, Todatdate);
                pr.setString(5, Sem_No);
                pr.setString(6, Attendance);

                result = pr.executeUpdate();
                System.out.println("addStudentTheoryMarks --> Insert");
            }
        } catch (Exception exp) {
            exp.printStackTrace();
        }
        return result;

    }

    public void fetchSubjects() {
        Subjects.removeAllItems();
        Subjects.addItem("Select");
        try {
            myres = con.mystmt.executeQuery("select * from assignedsubjects join department on assignedsubjects.DEPT_CODE=department.DEPT_CODE join subject on assignedsubjects.SUB_CODE=subject.SUB_CODE join staff on assignedsubjects.STAFF_ID=staff.STAFF_ID join person on staff.USERID=person.USERID");
            int sr = 0;
            while (myres.next()) {
                if (myres.getString("STAFF_ID").equals(StaffId)) {

                    String SubName = myres.getString("SUB_NAME");
                    Subjects.addItem(SubName);
                }

            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void TableError(String error) {
        jLabel3.setText(error);
    }

    public final void settable() {
        try {
            myres = con.mystmt.executeQuery("select * from assignedsubjects join department on assignedsubjects.DEPT_CODE=department.DEPT_CODE join subject on assignedsubjects.SUB_CODE=subject.SUB_CODE join staff on assignedsubjects.STAFF_ID=staff.STAFF_ID join person on staff.USERID=person.USERID");
            int sr = 0;
            while (myres.next()) {
                if (myres.getString("STAFF_ID").equals(StaffId)) {

                    String SubName = myres.getString("SUB_NAME");

                }

            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox<String> Subjects;
    private com.toedter.calendar.JDateChooser date;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTable jTable1;
    private com.k33ptoo.components.KButton kButton1;
    private com.k33ptoo.components.KGradientPanel kGradientPanel1;
    private com.k33ptoo.components.KGradientPanel kGradientPanel2;
    private com.k33ptoo.components.KGradientPanel kGradientPanel4;
    // End of variables declaration//GEN-END:variables
}
